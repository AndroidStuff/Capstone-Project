apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "mx.com.labuena.bikedriver"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        releaseConfig {
            keyAlias 'release_key'
            keyPassword KEY_PASSWORD
            storeFile file('../signingkeys/la_buena.keystore')
            storePassword KEYSTORE_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.releaseConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {

        }
    }

    productFlavors {
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile 'com.android.support:multidex:1.0.0'
    compile "com.android.support:design:$rootProject.supportLibraryVersion"

    compile "com.google.firebase:firebase-core:$rootProject.ext.firebaseVersion"
    compile "com.google.firebase:firebase-auth:$rootProject.ext.firebaseVersion"
    compile "com.google.firebase:firebase-messaging:$rootProject.ext.firebaseVersion"
    compile "com.google.firebase:firebase-crash:$rootProject.ext.firebaseVersion"

    apt "com.google.dagger:dagger-compiler:$rootProject.ext.daggerVersion"
    compile "com.google.dagger:dagger:$rootProject.ext.daggerVersion"
    provided 'javax.annotation:jsr250-api:1.0'

    compile "org.greenrobot:eventbus:$rootProject.ext.eventbusVersion"

    compile "com.google.android.gms:play-services-location:$rootProject.ext.playservicesVersion"
    compile "com.google.android.gms:play-services-maps:$rootProject.ext.playservicesVersion"

    compile "org.apache.commons:commons-lang3:$rootProject.ext.apachecommonsVersion"

    compile "com.google.code.gson:gson:$rootProject.ext.gsonVersion"

    compile project(path: ':LaBuenaServices', configuration: 'android-endpoints')

    androidTestCompile "org.hamcrest:hamcrest-library:$rootProject.ext.hamcrestVersion"
    androidTestCompile "org.mockito:mockito-core:1.+"
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.rulesVersion"

    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
    resolutionStrategy.force "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
    resolutionStrategy.force "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
    resolutionStrategy.force "com.google.code.findbugs:jsr305:$rootProject.ext.findBugsLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

apply plugin: 'com.google.gms.google-services'